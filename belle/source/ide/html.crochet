% crochet

singleton h;
local type element(box);

effect html with
  render(Element);
end

command belle with-html-root: Element do: (Block is (() -> B)) do
  handle
    Block();
  with
    on html.render(X) => foreign belle.append(Element, X.box);
  end
end


command h element: (Tag is text) = new element(foreign belle.box(Tag));

command element add: (Child is element) do
  foreign belle.append(self.box, Child.box);
  self;
end

command element add: (Child is text) do
  foreign belle.append(self.box, foreign belle.text(Child));
  self;
end

command element add: (Child is interpolation) do
  for Part in Child parts do
    self add: Part
  end
  self;
end

command element add: (Children is list) do
  for X in Children do self add: X end
  self;
end

command element set-attribute: (Name is text) to: (Value is text) do
  foreign belle.set-attribute(self.box, Name, Value);
  self;
end

command element set-attribute: Name to: (Value is interpolation) =
  self set-attribute: Name to: Value flatten-into-plain-text;

command element attribute: (Name is text) =
  foreign belle.get-attribute(self.box, Name);

command element class: Name = self set-attribute: "class" to: Name;
command element id: Name = self set-attribute: "id" to: Name;


command h page: Name =
  h element: "div"
    | class: "belle-page [Name]";

command h column =
  h element: "div"
    | class: "belle-column";

command h top-menu =
  h element: "div"
    | class: "belle-top-menu";

command h main-panel =
  h element: "div"
    | class: "belle-main-panel";

command h title: Title =
  h element: "h1"
    | class: "belle-title"
    | add: Title;

command h paragraph =
  h element: "p";